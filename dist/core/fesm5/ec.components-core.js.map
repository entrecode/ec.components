{"version":3,"file":"ec.components-core.js.map","sources":["ng://@ec.components/core/lib/collection/collection.ts","ng://@ec.components/core/lib/field/field.ts","ng://@ec.components/core/lib/config/config.ts","ng://@ec.components/core/lib/item/item.ts","ng://@ec.components/core/lib/form/form.ts","ng://@ec.components/core/lib/pagination/pagination.ts","ng://@ec.components/core/lib/sorter/sorter.ts","ng://@ec.components/core/lib/list/list.ts","ng://@ec.components/core/lib/selection/selection.ts"],"sourcesContent":["import { Observable, Subject } from 'rxjs';\n\n/**\n * A Collection is a more sophisticated Array. It is fundamental for other classes like List.\n */\nexport class Collection<T> {\n  /**\n   * The items must all have the same type T.\n   */\n  public items: Array<T>;\n  /** Subject that is nexted when the items update */\n  protected update: Subject<Collection<T>> = new Subject();\n  /** Subject that is nexted when the items change */\n  public update$: Observable<Collection<T>> = this.update.asObservable();\n\n  /**\n   * Constructs the collection with the given item Array (optional).\n   * @example\n   * ```typescript\n   *  const numbers = new Collection([1, 2, 3]);\n   * ```\n   */\n  constructor(items: Array<T> = []) {\n    this.items = [];\n    items.forEach((item) => {\n      this.items.push(item);\n    });\n  }\n\n  /** Returns the index of the given item */\n  index(item: T): number {\n    return this.items.indexOf(item);\n  }\n\n  /**\n   * Checks if the Collection contains the given item.\n   * @example\n   * ```typescript\n   * numbers.has(2); //true\n   * ```\n   */\n  has(item: T): boolean {\n    return this.index(item) !== -1;\n  }\n\n  /**\n   * Checks if the Collection contains all given items.\n   * @example\n   * ```typescript\n   * numbers.has([1,2]); //true\n   * ```\n   */\n  hasAll(items: Array<T> = []): boolean {\n    if (items === null) {\n      // console.warn('has all fail', this, items);\n      return false;\n    }\n    return items.reduce((has, item) => {\n      return has && this.has(item);\n    }, true);\n  }\n\n  /**\n   * Adds the given item to the Collection. If the unique flag is set, the item will only be added\n   * if it is not contained.\n   * @example\n   * ```typescript\n   * numbers.add(4);\n   * ```\n   */\n  add(item: T, unique?: boolean, event: boolean = true) {\n    if (unique && this.has(item)) {\n      return false;\n    }\n    this.items.push(item);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Adds the given items to the Collection. If the unique flag is set, only items that are not\n   * contained will be added.\n   * @example\n   * ```typescript\n   * numbers.addAll([5, 6, 7]);\n   * ```\n   */\n  addAll(items: Array<T> = [], unique: boolean = false, event: boolean = true) {\n    const length = this.items.length;\n    items.forEach((item) => {\n      this.add(item, unique, false);\n    });\n    if (this.items.length > length && event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Removes the given item from the Collection.\n   * @example\n   * ```typescript\n   * numbers.remove(4);\n   * ```\n   */\n  remove(item: T, event: boolean = true) {\n    if (!this.has(item)) {\n      return false;\n    }\n    this.items.splice(this.index(item), 1);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Removes all items from the Collection.\n   * @example\n   * ```typescript\n   * numbers.removeAll();\n   * ```\n   */\n  removeAll(items?: Array<T>, event: boolean = true) {\n    const length = this.items.length;\n    if (items) {\n      items.forEach((item) => {\n        this.remove(item, false);\n      });\n    } else {\n      this.items.length = 0;\n    }\n    if (this.items.length < length && event) {\n      this.update.next(this);\n    }\n  }\n\n  /** Toggles the item in and out of collection */\n  toggle(item: T, event: boolean = true) {\n    if (this.has(item)) {\n      this.remove(item, event);\n    } else {\n      this.add(item, event);\n    }\n  }\n\n  /** Replaces all current items with the given items. */\n  replaceWith(items: Array<T>, event: boolean = true) {\n    if (this.items && this.items.length) {\n      this.removeAll(undefined, false);\n    }\n    if (items.length) {\n      this.addAll(items, false, false);\n    }\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /** Returns true if the collection is empty */\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  /** Moves the given item to the given array index. */\n  move(item: T, index: number, event: boolean = true) {\n    if (!this.has(item) || this.items.indexOf(item) === index) {\n      return;\n    }\n    this.items.splice(index, 0, this.items.splice(this.items.indexOf(item), 1)[0]);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n}\n","/** A Field acts as a property of an Item. It holds a single Property config. */\n\nimport { FieldConfigProperty } from '../config/field-config-property.interface';\n\nexport class Field implements FieldConfigProperty {\n  /** Tells if the field is required in forms */\n  required?: boolean;\n  /** The name of the field's property */\n  property?: string;\n  /** If true, the field will not be visible anywhere */\n  hidden?: boolean;\n  /** The field's type */\n  type?: string;\n  /** The field's view */\n  view?: string;\n  /** Custom Validation function */\n  validate?: (value, field) => any;\n  /** Custom Component to display form input **/\n  input?: any;\n  /** Custom Component to display value **/\n  output?: any;\n  /** Placeholder in inputs */\n  placeholder?: string;\n  /** Label for Inputs. Defaults to property name. If false, the label is empty. */\n  label?: string | boolean;\n  /** The operator to use for filtering: exact, search, any etc.. see ec.sdk doc */\n  filterOperator?: string;\n  /** Defines the class for the filter pop, e.g. in list header. */\n  filterPopClass?: string;\n  /** Wether or not the field should appear in default forms */\n  form?: boolean;\n  /** Possible Values e.g. in a select */\n  values: any[] = [];\n  /** Class string */\n  class = '';\n  /** id for form labels */\n  id: string;\n  /** if false, the field will not be sortable in a list */\n  sortable?: boolean;\n  /** if false, the field will not be filterable in a list */\n  filterable?: boolean;\n  /** Defines the maximum of visible item (for tags view or similar). Defaults to 10 */\n  maxItems?: number;\n  /** Icon name that should be associated with the field */\n  icon?: string;\n  /** wildcard for custom config values */\n  [key: string]: any;\n\n  /** A Field is constructed by assigning the given config and the property to itself*/\n  constructor(property: string, config: FieldConfigProperty) {\n    if (config) {\n      Object.assign(this, config);\n    }\n    Object.assign(this, { property: property });\n    this.id = `${this.property}_${Date.now()}`;\n  }\n\n  /** Returns placeholder if any */\n  getPlaceholder() {\n    return this.placeholder || this.label || this.property;\n  }\n  /** Returns the column class for data-col, based on configured columns */\n  getColumns() {\n    return (this.columns || 12) + '-sm';\n  }\n}\n","/** The Root class for all Configurations. */\nexport abstract class Config {\n  // TODO use Map !!!! (like simi did in EventEmitter.ts)\n  /** The config object. */\n  private config: {\n    [key: string]: Object,\n  } = {};\n\n  /** This method is a getter and setter for configurations. The key stands for the config (e.g. model).\n   * The property is a sub property if the config (e.g. fields => model.fields).\n   * If no config is given, the method just returns the configuration for the given property.\n   * If a config is given, the property config is merged via Object.assign. */\n  public configure?(key: string, property: string, config?: Object) {\n    if (!this.config[key]) {\n      this.config[key] = {};\n    }\n    if (!config) {\n      return this.config[key][property];\n    }\n    if (!this.config[key][property]) {\n      this.config[key][property] = {};\n    }\n    Object.assign(this.config[key][property], config);\n    return this;\n  }\n}\n","import { ItemConfig } from './item-config.interface';\n\n/** An Item basically wraps an Object and provides a config with metadata and helper methods to access the object. */\nexport class Item<T> {\n  /** The value body of the item. This can be either a primitive value or an Object. */\n  public body: T;\n  /** The config of the item. */\n  public config: ItemConfig<T>;\n\n  /** Each item is constructed with its body and an optional config. */\n  constructor(body: T, config: ItemConfig<T> = {}) {\n    this.body = body;\n    this.config = config || this.generateConfig();\n  }\n\n  /** Generates a config from the body by setting view to the properties type. */\n  protected generateConfig(): ItemConfig<T> {\n    const config = { fields: {} };\n    if (this.body === undefined) {\n      return config;\n    }\n    this.getProperties().forEach((property) => {\n      config.fields[property] = {\n        view: typeof this.body[property],\n        type: typeof this.body[property],\n      };\n      if (config.fields[property].view === 'object' && Array.isArray(this.body[property])) {\n        config.fields[property].view = 'array';\n        config.fields[property].values = this.body[property];\n        // config.fields[property].solo = true;\n      }\n    });\n    return config;\n  }\n\n  /** Returns the item's body */\n  getBody() {\n    return this.body;\n  }\n\n  /** Returns true if the body is defined and not null*/\n  hasBody() {\n    return this.body !== undefined && this.body !== null;\n  }\n\n  /** deletes the item body */\n  clear() {\n    delete this.body;\n  }\n\n  /** Assigns the given config to the existing via Object.assign */\n  useConfig(config: ItemConfig<T>) {\n    this.config = (<any>Object).assign(this.config, config);\n  }\n\n  /** Returns the item's config */\n  getConfig() {\n    return this.config;\n  }\n\n  /** Returns an Array of properties possessed by the body. */\n  getProperties(): Array<string> {\n    if (!this.body || typeof this.body !== 'object') {\n      if (typeof this.body !== 'object') {\n        return [this.config && this.config.title ? this.config.title : 'body'];\n      }\n      return [];\n    }\n    return Object.keys(this.body);\n  }\n\n  /** Returns the value of the the Item's identifier property. */\n  id(): any {\n    if (!this.config.identifier) {\n      throw new Error('cannot get id of item without identifier!');\n    }\n    return this.resolve(this.config.identifier);\n  }\n\n  /** Returns either the whole body (if no property is given) or the value of the given property.\n   * This method will traverse the body via the config.resolve function (if given). */\n  resolve(property?: string): any {\n    if (!this.hasBody()) {\n      return;\n    }\n    if (typeof this.body !== 'object') {\n      return this.body;\n    }\n    if (!this.config) {\n      return property ? this.body[property] : this.body;\n    }\n    if (!property) {\n      if (this.config.resolve) {\n        return this.config.resolve(this.body);\n      }\n      return this.body;\n    }\n    if (this.config.fields && this.config.fields[property] && this.config.fields[property].resolve) {\n      return this.config.fields[property].resolve(this.body, this, property);\n    }\n    if (!this.config.resolve) {\n      return this.body[property];\n    }\n    const v = this.config.resolve(this.body);\n    return v ? v[property] : null;\n  }\n\n  /** The main method for transformation functions like resolve, display and group.\n   * If you dont set the third parameter, the current item value will be used.\n   * The third parameter can be used to transform a value that is not yet possesed (e.g. to\n   * serialize) */\n  private transform(action: string, property: string, value: any = this.resolve(property), defaultValue: any = this.resolve(property)) {\n    if (!this.hasBody()) {\n      return;\n    }\n    if (this.config.fields && this.config.fields[property] && this.config.fields[property][action]) {\n      return this.config.fields[property][action](value, this.body, property);\n    }\n    return defaultValue;\n  }\n\n  /** Returns the output of the config.group transformation function with the given property value.\n   * If no group function is set, it will just return the property value.*/\n  group(property: string): any {\n    return this.transform('group', property);\n  }\n\n  /** If no property given: Returns the output of the config.classes method or ''.\n   * If property given: Returns the output of the config.fields[property].classes method or '' */\n  classes(property?: string): string {\n    if (property) {\n      return this.transform('classes', property, this.resolve(property), '') || '';\n    }\n    if (!this.config || !this.config.classes) {\n      return '';\n    }\n    return this.config.classes(this);\n  }\n\n  /** Returns the output of the config.display transformation function with the given property value.\n   * If no display function is set, it will just return the property value.*/\n  display(property?: string): any {\n    if (!property) {\n      return this.transform('display', this.config.label || this.getProperties()[0]); // Object.keys(this.resolve())[0]\n    }\n    return this.transform('display', property);\n  }\n\n  /** Transforms the given field's value for sorting */\n  sort(property: string): any {\n    return this.transform('sort', property);\n  }\n\n  /** Returns value with all readOnly properties removed */\n  pickWriteOnly(value = this.body) {\n    return (<any>Object).assign({}, ...Object.keys(value)\n      .map(property => {\n        if (this.config.fields[property].readOnly) {\n          return;\n        }\n        return { [property]: value[property] };\n      }).filter(v => !!v));\n\n  }\n\n  isImmutableProperty(property: string): boolean {\n    if (this.config && this.config.fields && this.config.fields[property] && typeof this.config.fields[property].immutable === 'function') {\n      return this.config.fields[property].immutable(this);\n    }\n    return this.config.fields[property].immutable;\n  }\n\n  deleteImmutableProperties(value: Object = this.body) {\n    Object.keys(this.config.fields).forEach(property => {\n      if (value.hasOwnProperty(property) && this.isImmutableProperty(property)) {\n        delete value[property];\n      }\n    });\n  }\n\n  /** Transforms the given field's value for serialization when saving. */\n  serialize(value, put: boolean = false): any {\n    if (put) {\n      value = this.pickWriteOnly(value);\n    }\n    this.deleteImmutableProperties(value);\n    /** Run the remaining properties through serializers */\n    Object.keys(value).map((property) => {\n      (<any>Object).assign(value, {\n        [property]: this.transform('serialize', property, value[property]) // TODO: fix\n      });\n    });\n    return value;\n\n    /** Run the remaining properties through serializers */\n    /*return Object.keys(value).reduce((serialized, property) => {\n      return Object.assign(serialized, {\n        [property]: this.transform('serialize', property, value[property])\n      });\n    }, {});*/\n  }\n\n  /** Saves the given value. Run serializers before assigning the new value. */\n  save(value: T = this.body): Promise<Item<T>> {\n    if (this.config.onSave) {\n      return Promise.resolve(this.config.onSave(this, value))\n        .then((_value: T) => {\n          this.body = _value;\n          return this;\n        });\n    }\n    this.body = (<any>Object).assign(this.resolve() || {}, value);\n    return Promise.resolve(this);\n  }\n  /** Action method that is meant to be called on a button click or similar.\n   * Calls the config#action method with the item and the property name */\n  action(property, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.config.fields[property].action) {\n      this.config.fields[property].action(this, property);\n    }\n  }\n}\n","/** A Form is an extension of an Item. In advance to an Item it will create an Array of fields that is either extracted\n * from config.fields or directly from the item body. */\n\nimport { FieldConfigProperty } from '../config/field-config-property.interface';\nimport { Field } from '../field/field';\nimport { Item } from '../item/item';\nimport { FormConfig } from './form-config.interface';\n\n/** The Form class is an Item with additional info about its properties (Fields). */\nexport class Form<T> extends Item<T> {\n  /** Array of fields. It will be populated automatically when the form is constructed. */\n  public fields: Field[];\n  /** The configuration of the form. It is an extension of ItemConfig. */\n  public config: FormConfig<T>;\n\n  /** The constructor will populate the fields array.\n   * If config.fields is set only the configured fields will be created.\n   * If not, all properties of the given body will be used as fields. */\n  constructor(body: T, config?: FormConfig<T>) {\n    super(body, config);\n    this.fields = [];\n    if (!this.config || !this.config.fields) {\n      return;\n    }\n    Object.keys(this.config.fields)\n      .forEach((property) => {\n        this.fields.push(new Field(property, this.config.fields[property]));\n      });\n  }\n\n  /** creates and adds a single field to the form */\n  createField(property: string, config: FieldConfigProperty): Field | undefined {\n    if (!config) {\n      return;\n    }\n    if (!property) {\n      return;\n    }\n    if (this.config.fields[property]) {\n      console.error('cannot create field \"', property, '\". Property name already taken.');\n      return;\n    }\n    this.config.fields[property] = config;\n    const field = new Field(property, this.config.fields[property]);\n    this.fields = this.fields.concat([field]);\n    return field;\n  }\n\n  /** returns the field instance of the given property */\n  getField(property: string) {\n    return this.fields.find((field) => field.property === property);\n  }\n\n  /** Returns the original value of the property, if any. */\n  getValue(property: string) {\n    if (!this.body && this.config.fields && this.config.fields[property]) {\n      // If the prefill is not a primitive, return a clone to stay pristine\n      if (Array.isArray(this.config.fields[property].prefill)) {\n        return this.config.fields[property].prefill.slice(0);\n      } else if (typeof this.config.fields[property].prefill === 'object') {\n        return Object.assign({}, this.config.fields[property].prefill);\n      }\n      // if no body is present, the prefills are used\n      return this.config.fields[property].prefill;\n    } else {\n      return this.resolve(property);\n    }\n  }\n\n  /** Returns true if the form is currently in edit mode (has a body set) */\n  isEditing() {\n    return !!this.getBody();\n  }\n\n  /** Returns true if the form is currently in create mode (has not a body set) */\n  isCreating() {\n    return !this.isEditing();\n  }\n}\n","import { Subject, Observable } from 'rxjs';\nimport { ListConfig } from '../list/list-config.interface';\n\n/** This class can be used to control the loading behaviour of external data. */\nexport class Pagination<T> {\n  /** The total number of items that is being paginated. It can be changed via setTotal. */\n  protected total: number;\n  /** The pagination config */\n  protected config: ListConfig<T>;\n  /** Array to iterate over the number of pages. */\n  public pages: Array<any>;\n  /** Subject for tracking changes. */\n  private change = new Subject();\n  /** Observable that is nexted when the pagination has changed. */\n  public change$: Observable<any> = this.change.asObservable();\n\n  /** You can init each Pagination instance with an optional config.\n   * If no config is provided, it will default to ```{page: 1, size: 25}```. */\n  constructor(config?: ListConfig<T>, total?: number) {\n    this.config = { page: 1, size: 25 };\n    Object.assign(this.config, config);\n    Object.assign(this.config, {\n      availableSizes: Array.from(new Set([this.config.size]\n        .concat(this.config.availableSizes || [10, 25, 50, 100], [this.config.size])\n        .sort(((a, b) => a - b))))\n    });\n    if (total) {\n      this.setTotal(total);\n    }\n  }\n\n  /** Retrieves the current page */\n  getPage(): number {\n    return this.config.page;\n  }\n\n  /** Retrieves the number of pages */\n  getPages(): number {\n    return this.pages ? this.pages.length : 0;\n  }\n\n  /** Loads the next page. Throws error if already on last page. */\n  next(): void {\n    if (this.isLast()) {\n      return; // already last page\n    }\n    this.config.page += 1;\n    this.load();\n  }\n\n  /** Loads the previous page. Throws error if already on first page. */\n  prev(): void {\n    if (this.isFirst()) {\n      return; // already first page\n    }\n    this.config.page -= 1;\n    this.load();\n  }\n\n  /**\n   * Sets the total number of items and calculcates the page count.\n   * */\n  setTotal(total: number) {\n    /* if (this.total !== total) {\n      this.change.next(this.config);\n    } */\n    this.total = total;\n    this.pages = new Array(Math.ceil(this.total / this.config.size));\n    if (this.config.page !== 1 && this.config.page > this.pages.length) {\n      this.config.page = this.pages.length || 1;\n      this.load();\n    }\n  }\n\n  /** Merges config and fires next on change */\n  protected load(config?: ListConfig<T>): void {\n    if (config) {\n      Object.assign(this.config, config);\n    }\n    this.change.next(this.config);\n  }\n\n  /** Selects the given page number */\n  select(page: number, silent = false): void {\n    if (page === this.config.page || silent) {\n      this.config.page = page;\n      return;\n    }\n    this.load({ page: page });\n  }\n\n  /** Loads the first Page */\n  first(): void {\n    this.load({ page: 1 });\n  }\n\n  /** Loads the last page */\n  last() {\n    if (!this.pages) {\n      throw new Error(`Cannot load last page without knowing the item count.\n        Call setTotal(itemCount) before loading.`);\n    }\n    this.load({ page: this.pages.length });\n  }\n\n  /** Returns true if the given page number is currently active.*/\n  isActive(page: number): boolean {\n    return this.config.page === page;\n  }\n\n  /** Returns true if the current page is the first one */\n  isFirst(): boolean {\n    return this.config.page === 1;\n  }\n\n  /** Returns true if the current page is the last one */\n  isLast(): boolean {\n    if (!this.pages) {\n      return true;\n    }\n    return this.config.page === this.pages.length;\n  }\n\n  /** slices a given array according to the current pagination state */\n  slice(items: Array<any>): Array<any> {\n    return items.slice((this.config.page - 1) * this.config.size, (this.config.page) * this.config.size);\n  }\n\n  /** Returns an object with all relevant infos about the current state of pagination */\n  params() {\n    return {\n      page: this.getPage(),\n      pages: this.getPages(),\n      total: this.total,\n      from: (this.getPage() - 1) * this.config.size + 1,\n      to: Math.min(this.getPage() * this.config.size, this.total),\n      size: this.config.size,\n      availableSizes: this.config.availableSizes,\n    };\n  }\n  /** updates the size of the pages.  */\n  updateSize(size: number) {\n    if (!size) {\n      return;\n    }\n    this.load({ size, page: 1 });\n  }\n}\n","import { Item } from '../item/item';\n\n/** Used for natural sorting of strings */\nconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n\n/** Sorts strings (naturally) */\nexport function sortString(a, b) {\n  return collator.compare(a, b);\n}\n\n/** Sorts numbers */\nexport function sortNumber(a, b) {\n  return a - b;\n}\n\n/** Sorts booleans */\nexport function sortBoolean(a, b) {\n  return a ? -1 : 1;\n}\n\n/** The Sorter is a singleton that handles all kinds of sorting operations. */\nexport abstract class Sorter<T> {\n\n  /** Contains sorting methods for different value types. */\n  static sortType = {\n    'string': sortString,\n    'number': sortNumber,\n    'boolean': sortBoolean\n  };\n\n  /** Returns the sorting algorithm for the given item array. */\n  private static getAlgorithm(items: Array<Item<any>>, property?: string): (a, b) => number {\n    if (!items.length) {\n      return;\n    }\n    if (property && !items\n      .reduce((has, item) => has && item.sort(property) !== undefined, true)) {\n      console.warn('cannot sort property \"' + property + '\" because not all items have that property', items);\n      return;\n    }\n    const types = items\n      .map(item => typeof item.sort(property))\n      .filter((item, index, _items) => _items.indexOf(item) === index);\n    if (types.length > 1) {\n      console.warn('cannot sort items because they contain multiple types:', types);\n      return;\n    }\n    if (!this.sortType[types[0]]) {\n      console.warn('cannot sort items because no algorithm was found for type', types[0]);\n      return;\n    }\n    return this.sortType[types[0]];\n  }\n\n  /** Sorts a given Array of items after a given property.\n   * @param items Array of arbitrary content.\n   * @param property Optional property to sort after (For Objects)\n   * @param desc Optional Flag that will reverse sort the result (descending).\n   * @param resolve Optional resolve function to expose relevant the part of object that contains\n   *   the given property. */\n\n  static sort(items: Array<Item<any>>, property?: string, desc?: boolean): Array<any> {\n    const algorithm = this.getAlgorithm(items, property);\n    if (!algorithm) {\n      return;\n    }\n    items.sort((a, b) => {\n      if (!property) {\n        return algorithm(a.resolve(), b.resolve());\n      }\n      return algorithm(a.sort(property), b.sort(property));\n    });\n    if (desc) {\n      items.reverse();\n    }\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Collection } from '../collection/collection';\nimport { Field } from '../field/field';\nimport { Item } from '../item/item';\nimport { Pagination } from '../pagination/pagination';\nimport { Sorter } from '../sorter/sorter';\nimport { ListConfig } from './list-config.interface';\n\n/**\n * A more sophisticated Collection of Objects with arbitrary content.\n * It comes with features like resolve functions, identifiers, display formatting and sorting.\n */\nexport class List<T> extends Collection<Item<T>> {\n  /**\n   * Array of Properties that are relevant for each item. The fields are populated on construction\n   * via getFields method.\n   */\n  public fields: Array<Field>;\n  /**\n   * The List Configuration, click on ListConfig for details. Can be given an optional ListConfig.\n   */\n  public config: ListConfig<T>;\n  /**\n   * Current Value Groups (Different Unique Values).\n   */\n  groups = [];\n  /** The list's pagination (Optional) */\n  public pagination: Pagination<T>;\n  /** The items of the current page */\n  public page: Array<Item<T>> = [];\n  /** Subject that should be nexted when loading is finished */\n  protected change: Subject<List<T>> = new Subject();\n  /** Observable that is nexted when the list has changed. */\n  public change$: Observable<List<T>> = this.change.asObservable();\n\n  /** Getter for items, calls transform */\n  get display() {\n    if (!this.config || !this.config.display) {\n      return this.items;\n    }\n    return this.config.display(this.items);\n  }\n\n  /**\n   * Constructs the List. Populates the items and instantiates the fields.\n   */\n  constructor(values?: Array<T>, config: ListConfig<T> = {}, pagination?: Pagination<T>) {\n    super([]);\n    if (values) {\n      super.addAll(values.map(value => new Item(value, Object.assign({}, config))), false, false);\n    }\n    this.config = Object.assign({ page: 1, maxColumns: 8 }, config || {});\n    this.fields = this.getFields();\n    this.hideOverflowFields();\n    this.pagination = pagination || new Pagination(this.config, this.items.length);\n    this.change$.subscribe(() => {\n      this.pagination.select(this.config.page || 1, true);\n    });\n    if (!pagination) { // load if no custom pagination was given\n      this.pagination.change$.pipe(debounceTime(200))\n        .subscribe(_config => this.load(_config));\n      this.load();\n    }\n  }\n\n  /** Loads the list page with the given config or, if none given, uses the current config.\n   * Reapplies grouping (if any) and calls the change Subject. */\n  public load(config?: ListConfig<T>) {\n    if (config) {\n      Object.assign(this.config, config);\n    }\n    this.page = this.pagination.slice(this.items);\n    this.groupBy(this.config.sortBy);\n    this.change.next(this);\n  }\n\n  /** Adds the given item to the list and assigns the list config to the item*/\n  add(item: Item<T>, unique?: boolean, event: boolean = true) {\n    item.useConfig(this.config);\n    return super.add(item, unique, event);\n  }\n\n  /**\n   * Distills Array of item properties. Either uses keys of config.fields or parses the item\n   * properties directly.\n   */\n  protected getFields(): Array<Field> {\n    if (this.config && this.config.fields) {\n      return Object.keys(this.config.fields)\n        .filter((key) => this.config.fields[key].list !== false)\n        .map((field) => new Field(field, this.config.fields[field]));\n    }\n    const fields = [];\n    this.items.forEach((item) => {\n      item.getProperties().forEach(property => {\n        if (!fields.find((f) => f.property === property)) {\n          fields.push(new Field(property, { type: typeof item.resolve(property) }));\n        }\n      });\n    });\n    return fields;\n  }\n\n  public toggleVisibility(field) {\n    field.hideInList = !field.hideInList;\n    this.change.next(this);\n  }\n\n  /** Sets all fields that exceed the maxColumns to hidden */\n  protected hideOverflowFields() {\n    if (this.config && this.config.maxColumns) {\n      this.fields.filter(f => !f.hideInList).forEach((field, index) => {\n        if (index >= this.config.maxColumns && field.hideInList === undefined) {\n          field.hideInList = true;\n        }\n      });\n    }\n  }\n\n  /**\n   * Resolves the item with the given Array index or identifier (if configured)\n   */\n  id(identifier: any): Item<T> {\n    if (identifier === undefined) {\n      throw new Error(`cannot get item with identifier \"${identifier}\"`);\n    }\n    return this.items.find((item, key) => {\n      if (!item.config.identifier) {\n        return false;\n      }\n      return item.id() === identifier;\n    }) || this.items[identifier];\n  }\n\n  /** Filters the list after the given property and value */\n  public filter(property: string, value: any = '', operator: string = 'exact') {\n    this.config.filter = { [property]: value };\n    if (value === null) {\n      this.load();\n      return;\n      // this.page = [].concat(this.items);\n    }\n    // TODO find way to filter with pagination and without loosing filtered out items\n    this.page = this.items.filter((item) => {\n      return item.resolve(property).toLowerCase().includes(value.toLowerCase()); // TODO: better filter\n    }).slice(0, this.config.size || 100);\n  }\n\n  /** Clears the filter for given property or all properties if none given. */\n  clearFilter(property?: string) {\n    if (property) {\n      return this.filter(property, null);\n    }\n    this.load({\n      page: 1,\n      filter: {}\n    });\n  }\n\n  /** Helper function. Returns true if the given query value is empty (also recognizes empty array) */\n  isEmptyFilter(query: null | undefined | string | Array<any>) {\n    return query === '' ||\n      query === null ||\n      query === undefined ||\n      (Array.isArray(query) && !query.length);\n  }\n\n  /** Returns true if the given property has a filter set. If no property is given it returns true when no property has a filter. */\n  isFiltered(property?: string) {\n    if (!this.config.filter) {\n      return false;\n    }\n    if (!property) {\n      return Object.keys(this.config.filter)\n        .filter(key => !this.isEmptyFilter(this.config.filter[key]))\n        .length > 0;\n    }\n    return !this.isEmptyFilter(this.config.filter[property]);\n  }\n\n  /** Returns the filter */\n  getFilterValue(property?: string) {\n    if (!property) {\n      property = this.config.label;\n    }\n    if (!this.config.filter || !property) {\n      return undefined;\n    }\n    return this.config.filter[property];\n  }\n\n  /** Changes the config's sort variables to reflect the given sorting */\n  protected sortProperty(property: string, desc?: boolean) {\n    if (property !== this.config.sortBy) {\n      delete this.config.desc;\n      this.config.sortBy = property;\n    } else if (this.config.desc) {\n      delete this.config.sortBy;\n    }\n    this.config.desc = this.config.desc === undefined ? desc || false : !this.config.desc;\n  }\n\n  /** Returns true if the given sort state is active. You can either just check for a property + desc flag */\n  public isSorted(property: string, desc?: boolean) {\n    if (typeof desc === 'undefined') {\n      return this.config.sortBy === property;\n    }\n    return this.config.sortBy === property && this.config.desc === desc;\n  }\n\n  /** Sorts with given sorting, using the Sorter */\n  toggleSort(property: string, desc?: boolean) {\n    this.sortProperty(property, desc);\n    Sorter.sort(this.items, property, this.config.desc);\n    this.load(this.config);\n  }\n  /** Toggles selectMode of list config */\n  toggleSelectMode() {\n    this.config = Object.assign({}, this.config, {\n      selectMode: !this.config.selectMode\n    });\n    this.change.next(this);\n  }\n\n  /** Returns an Array of all unique values of the given property */\n  groupBy(property) {\n    delete this.groups;\n    const page = this.pagination ? this.pagination.getPage() : 0;\n    if (!property || !this.config.fields || !this.config.fields[property] || !this.config.fields[property].group) {\n      this.groups = [{\n        page,\n        sortBy: this.config.sortBy,\n        desc: this.config.desc\n      }];\n      return;\n    }\n    const groups = [];\n    this.page.forEach(item => {\n      const value = item.group(property);\n      if (!groups.find((g) => g.value === value)) {\n        groups.push({\n          value,\n          page,\n          property: this.config.sortBy,\n          desc: this.config.desc\n        });\n      }\n    });\n    this.groups = groups;\n  }\n\n  /** Item tracking for *ngFor. */\n  public trackItem(index, item) {\n    return index;\n  }\n  /** Returns an array of all sortable fields */\n  public sortableFields() {\n    return this.fields.filter(field => field.sortable);\n  }\n  /** Returns true if the given field index in the visible fields is higher than maxColumns.  */\n  public isOverTheMax(field: Field) {\n    return this.fields.filter(f => !f.hideInList).indexOf(field) >= this.config.maxColumns;\n  }\n}\n","import { Item } from '../item/item';\nimport { List } from '../list/list';\n\n/**\n * Extension of List that keeps track of selected items. It can keep track of items via identifier\n * property even if the object references are being replaced, e.g. when reloading a set if items.\n * It supports solo and multiple selection.\n */\nexport class Selection<T> extends List<T> {\n\n  /** Adds item to selection. If solo is true, all other items will be removed. */\n  select(item: Item<T>, solo = this.config.solo) {\n    if (solo) {\n      this.removeAll();\n      this.add(item);\n    } else {\n      this.add(item, true);\n    }\n  }\n\n  /** Returns the index of the given item or an item that has the same identifier or value. */\n  index(item: Item<T>): number {\n    if (this.config.identifier) {\n      return this.items.indexOf(this.id(item.resolve(this.config.identifier)));\n    }\n    return this.items.indexOf(this.items.find(i => i.resolve() === item.resolve()));\n  }\n\n  has(item: Item<T>) {\n    return super.has(item) || this.index(item) !== -1;\n  }\n\n  /** Toggle item in and out of selection.\n   * The solo property will change the behaviour like you would expect it to behave :) */\n  toggle(item: Item<T>, solo = this.config.solo, event: boolean = true) {\n    if (!item) {\n      console.warn('toggle malicious item', item);\n      return;\n    }\n    if (!this.has(item)) {\n      if (solo) {\n        return this.replaceWith([item], event);\n      }\n      this.add(item, event);\n    } else if (solo) {\n      if (this.items.length > 1) {\n        // if multiple are selected => keep item\n        return this.replaceWith([item], event);\n      }\n      this.removeAll();\n    } else {\n      this.remove(item, event);\n    }\n  }\n\n  /** Toggle multiple items. You can control if the items should be kept, flipped, or be kept unique*/\n  toggleAll(items: Array<Item<T>>, flip?: boolean, keep?: boolean) {\n    items = items || [];\n    // items = Array.isArray(items) ? items : [items];\n    if (!flip && !keep && this.hasAll(items)) {\n      this.removeAll(items);\n      return this;\n    }\n    items.forEach((item) => {\n      if (flip) {\n        this.toggle(item, this.config.solo, false);\n      } else if (!this.hasAll(items)) {\n        this.add(item, true, false);\n      }\n    });\n    this.update.next(this);\n    return this;\n  }\n\n  /** Flips all items. */\n  flipAll(items) {\n    return this.toggleAll(items, true);\n  }\n\n  /** Returns an Array containing the current value. If an identifier is set, the array will consist of the identifier values,\n   * if not, it will resolve the item contents. */\n  getValue(solo: boolean = this.config.solo) {\n    const value = this.items.map((item) => this.config.identifier ? item.id() : item.resolve());\n    if (solo) {\n      return value.length ? value[0] : null;\n    }\n    return value;\n  }\n\n}\n"],"names":["tslib_1.__extends"],"mappings":"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"}
