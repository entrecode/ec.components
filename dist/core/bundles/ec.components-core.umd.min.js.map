{"version":3,"sources":["ng://@ec.components/core/lib/collection/collection.ts","ng://@ec.components/core/lib/field/field.ts","ng://@ec.components/core/lib/config/config.ts","node_modules/tslib/tslib.es6.js","ng://@ec.components/core/lib/item/item.ts","ng://@ec.components/core/lib/form/form.ts","ng://@ec.components/core/lib/pagination/pagination.ts","ng://@ec.components/core/lib/sorter/sorter.ts","ng://@ec.components/core/lib/list/list.ts","ng://@ec.components/core/lib/selection/selection.ts"],"names":["Collection","items","_this","this","update","Subject","update$","asObservable","forEach","item","push","prototype","index","indexOf","has","hasAll","reduce","add","unique","event","next","addAll","length","remove","splice","removeAll","toggle","replaceWith","undefined","isEmpty","move","Field","property","config","values","class","Object","assign","id","Date","now","getPlaceholder","placeholder","label","getColumns","columns","Config","configure","key","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","call","ar","done","value","error","Item","body","generateConfig","fields","getProperties","view","type","isArray","getBody","hasBody","clear","useConfig","getConfig","keys","title","identifier","Error","resolve","v","transform","action","defaultValue","group","classes","display","sort","pickWriteOnly","apply","__spread","arguments","concat","map","readOnly","_a","filter","isImmutableProperty","immutable","deleteImmutableProperties","serialize","put","save","onSave","Promise","then","_value","preventDefault","stopPropagation","stopImmediatePropagation","Form","_super","tslib_1.__extends","createField","field","console","getField","find","getValue","prefill","slice","isEditing","isCreating","Pagination","total","change","change$","page","size","availableSizes","from","Set","a","setTotal","getPage","getPages","pages","isLast","load","prev","isFirst","Math","ceil","select","silent","first","last","isActive","params","to","min","updateSize","collator","Intl","Collator","numeric","sensitivity","sortString","compare","sortNumber","sortBoolean","Sorter","getAlgorithm","types","_items","warn","sortType","desc","algorithm","reverse","string","number","boolean","List","pagination","groups","maxColumns","getFields","hideOverflowFields","subscribe","pipe","debounceTime","_config","defineProperty","groupBy","sortBy","list","f","toggleVisibility","hideInList","operator","toLowerCase","includes","clearFilter","isEmptyFilter","query","isFiltered","getFilterValue","sortProperty","isSorted","toggleSort","toggleSelectMode","selectMode","g","trackItem","sortableFields","sortable","isOverTheMax","Selection","solo","toggleAll","flip","keep","flipAll"],"mappings":"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","sourcesContent":["import { Observable, Subject } from 'rxjs';\n\n/**\n * A Collection is a more sophisticated Array. It is fundamental for other classes like List.\n */\nexport class Collection<T> {\n  /**\n   * The items must all have the same type T.\n   */\n  public items: Array<T>;\n  /** Subject that is nexted when the items update */\n  protected update: Subject<Collection<T>> = new Subject();\n  /** Subject that is nexted when the items change */\n  public update$: Observable<Collection<T>> = this.update.asObservable();\n\n  /**\n   * Constructs the collection with the given item Array (optional).\n   * @example\n   * ```typescript\n   *  const numbers = new Collection([1, 2, 3]);\n   * ```\n   */\n  constructor(items: Array<T> = []) {\n    this.items = [];\n    items.forEach((item) => {\n      this.items.push(item);\n    });\n  }\n\n  /** Returns the index of the given item */\n  index(item: T): number {\n    return this.items.indexOf(item);\n  }\n\n  /**\n   * Checks if the Collection contains the given item.\n   * @example\n   * ```typescript\n   * numbers.has(2); //true\n   * ```\n   */\n  has(item: T): boolean {\n    return this.index(item) !== -1;\n  }\n\n  /**\n   * Checks if the Collection contains all given items.\n   * @example\n   * ```typescript\n   * numbers.has([1,2]); //true\n   * ```\n   */\n  hasAll(items: Array<T> = []): boolean {\n    if (items === null) {\n      // console.warn('has all fail', this, items);\n      return false;\n    }\n    return items.reduce((has, item) => {\n      return has && this.has(item);\n    }, true);\n  }\n\n  /**\n   * Adds the given item to the Collection. If the unique flag is set, the item will only be added\n   * if it is not contained.\n   * @example\n   * ```typescript\n   * numbers.add(4);\n   * ```\n   */\n  add(item: T, unique?: boolean, event: boolean = true) {\n    if (unique && this.has(item)) {\n      return false;\n    }\n    this.items.push(item);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Adds the given items to the Collection. If the unique flag is set, only items that are not\n   * contained will be added.\n   * @example\n   * ```typescript\n   * numbers.addAll([5, 6, 7]);\n   * ```\n   */\n  addAll(items: Array<T> = [], unique: boolean = false, event: boolean = true) {\n    const length = this.items.length;\n    items.forEach((item) => {\n      this.add(item, unique, false);\n    });\n    if (this.items.length > length && event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Removes the given item from the Collection.\n   * @example\n   * ```typescript\n   * numbers.remove(4);\n   * ```\n   */\n  remove(item: T, event: boolean = true) {\n    if (!this.has(item)) {\n      return false;\n    }\n    this.items.splice(this.index(item), 1);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /**\n   * Removes all items from the Collection.\n   * @example\n   * ```typescript\n   * numbers.removeAll();\n   * ```\n   */\n  removeAll(items?: Array<T>, event: boolean = true) {\n    const length = this.items.length;\n    if (items) {\n      items.forEach((item) => {\n        this.remove(item, false);\n      });\n    } else {\n      this.items.length = 0;\n    }\n    if (this.items.length < length && event) {\n      this.update.next(this);\n    }\n  }\n\n  /** Toggles the item in and out of collection */\n  toggle(item: T, event: boolean = true) {\n    if (this.has(item)) {\n      this.remove(item, event);\n    } else {\n      this.add(item, event);\n    }\n  }\n\n  /** Replaces all current items with the given items. */\n  replaceWith(items: Array<T>, event: boolean = true) {\n    if (this.items && this.items.length) {\n      this.removeAll(undefined, false);\n    }\n    if (items.length) {\n      this.addAll(items, false, false);\n    }\n    if (event) {\n      this.update.next(this);\n    }\n  }\n\n  /** Returns true if the collection is empty */\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  /** Moves the given item to the given array index. */\n  move(item: T, index: number, event: boolean = true) {\n    if (!this.has(item) || this.items.indexOf(item) === index) {\n      return;\n    }\n    this.items.splice(index, 0, this.items.splice(this.items.indexOf(item), 1)[0]);\n    if (event) {\n      this.update.next(this);\n    }\n  }\n}\n","/** A Field acts as a property of an Item. It holds a single Property config. */\n\nimport { FieldConfigProperty } from '../config/field-config-property.interface';\n\nexport class Field implements FieldConfigProperty {\n  /** Tells if the field is required in forms */\n  required?: boolean;\n  /** The name of the field's property */\n  property?: string;\n  /** If true, the field will not be visible anywhere */\n  hidden?: boolean;\n  /** The field's type */\n  type?: string;\n  /** The field's view */\n  view?: string;\n  /** Custom Validation function */\n  validate?: (value, field) => any;\n  /** Custom Component to display form input **/\n  input?: any;\n  /** Custom Component to display value **/\n  output?: any;\n  /** Placeholder in inputs */\n  placeholder?: string;\n  /** Label for Inputs. Defaults to property name. If false, the label is empty. */\n  label?: string | boolean;\n  /** The operator to use for filtering: exact, search, any etc.. see ec.sdk doc */\n  filterOperator?: string;\n  /** Defines the class for the filter pop, e.g. in list header. */\n  filterPopClass?: string;\n  /** Wether or not the field should appear in default forms */\n  form?: boolean;\n  /** Possible Values e.g. in a select */\n  values: any[] = [];\n  /** Class string */\n  class = '';\n  /** id for form labels */\n  id: string;\n  /** if false, the field will not be sortable in a list */\n  sortable?: boolean;\n  /** if false, the field will not be filterable in a list */\n  filterable?: boolean;\n  /** Defines the maximum of visible item (for tags view or similar). Defaults to 10 */\n  maxItems?: number;\n  /** Icon name that should be associated with the field */\n  icon?: string;\n  /** wildcard for custom config values */\n  [key: string]: any;\n\n  /** A Field is constructed by assigning the given config and the property to itself*/\n  constructor(property: string, config: FieldConfigProperty) {\n    if (config) {\n      Object.assign(this, config);\n    }\n    Object.assign(this, { property: property });\n    this.id = `${this.property}_${Date.now()}`;\n  }\n\n  /** Returns placeholder if any */\n  getPlaceholder() {\n    return this.placeholder || this.label || this.property;\n  }\n  /** Returns the column class for data-col, based on configured columns */\n  getColumns() {\n    return (this.columns || 12) + '-sm';\n  }\n}\n","/** The Root class for all Configurations. */\nexport abstract class Config {\n  // TODO use Map !!!! (like simi did in EventEmitter.ts)\n  /** The config object. */\n  private config: {\n    [key: string]: Object,\n  } = {};\n\n  /** This method is a getter and setter for configurations. The key stands for the config (e.g. model).\n   * The property is a sub property if the config (e.g. fields => model.fields).\n   * If no config is given, the method just returns the configuration for the given property.\n   * If a config is given, the property config is merged via Object.assign. */\n  public configure?(key: string, property: string, config?: Object) {\n    if (!this.config[key]) {\n      this.config[key] = {};\n    }\n    if (!config) {\n      return this.config[key][property];\n    }\n    if (!this.config[key][property]) {\n      this.config[key][property] = {};\n    }\n    Object.assign(this.config[key][property], config);\n    return this;\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { ItemConfig } from './item-config.interface';\n\n/** An Item basically wraps an Object and provides a config with metadata and helper methods to access the object. */\nexport class Item<T> {\n  /** The value body of the item. This can be either a primitive value or an Object. */\n  public body: T;\n  /** The config of the item. */\n  public config: ItemConfig<T>;\n\n  /** Each item is constructed with its body and an optional config. */\n  constructor(body: T, config: ItemConfig<T> = {}) {\n    this.body = body;\n    this.config = config || this.generateConfig();\n  }\n\n  /** Generates a config from the body by setting view to the properties type. */\n  protected generateConfig(): ItemConfig<T> {\n    const config = { fields: {} };\n    if (this.body === undefined) {\n      return config;\n    }\n    this.getProperties().forEach((property) => {\n      config.fields[property] = {\n        view: typeof this.body[property],\n        type: typeof this.body[property],\n      };\n      if (config.fields[property].view === 'object' && Array.isArray(this.body[property])) {\n        config.fields[property].view = 'array';\n        config.fields[property].values = this.body[property];\n        // config.fields[property].solo = true;\n      }\n    });\n    return config;\n  }\n\n  /** Returns the item's body */\n  getBody() {\n    return this.body;\n  }\n\n  /** Returns true if the body is defined and not null*/\n  hasBody() {\n    return this.body !== undefined && this.body !== null;\n  }\n\n  /** deletes the item body */\n  clear() {\n    delete this.body;\n  }\n\n  /** Assigns the given config to the existing via Object.assign */\n  useConfig(config: ItemConfig<T>) {\n    this.config = (<any>Object).assign(this.config, config);\n  }\n\n  /** Returns the item's config */\n  getConfig() {\n    return this.config;\n  }\n\n  /** Returns an Array of properties possessed by the body. */\n  getProperties(): Array<string> {\n    if (!this.body || typeof this.body !== 'object') {\n      if (typeof this.body !== 'object') {\n        return [this.config && this.config.title ? this.config.title : 'body'];\n      }\n      return [];\n    }\n    return Object.keys(this.body);\n  }\n\n  /** Returns the value of the the Item's identifier property. */\n  id(): any {\n    if (!this.config.identifier) {\n      throw new Error('cannot get id of item without identifier!');\n    }\n    return this.resolve(this.config.identifier);\n  }\n\n  /** Returns either the whole body (if no property is given) or the value of the given property.\n   * This method will traverse the body via the config.resolve function (if given). */\n  resolve(property?: string): any {\n    if (!this.hasBody()) {\n      return;\n    }\n    if (typeof this.body !== 'object') {\n      return this.body;\n    }\n    if (!this.config) {\n      return property ? this.body[property] : this.body;\n    }\n    if (!property) {\n      if (this.config.resolve) {\n        return this.config.resolve(this.body);\n      }\n      return this.body;\n    }\n    if (this.config.fields && this.config.fields[property] && this.config.fields[property].resolve) {\n      return this.config.fields[property].resolve(this.body, this, property);\n    }\n    if (!this.config.resolve) {\n      return this.body[property];\n    }\n    const v = this.config.resolve(this.body);\n    return v ? v[property] : null;\n  }\n\n  /** The main method for transformation functions like resolve, display and group.\n   * If you dont set the third parameter, the current item value will be used.\n   * The third parameter can be used to transform a value that is not yet possesed (e.g. to\n   * serialize) */\n  private transform(action: string, property: string, value: any = this.resolve(property), defaultValue: any = this.resolve(property)) {\n    if (!this.hasBody()) {\n      return;\n    }\n    if (this.config.fields && this.config.fields[property] && this.config.fields[property][action]) {\n      return this.config.fields[property][action](value, this.body, property);\n    }\n    return defaultValue;\n  }\n\n  /** Returns the output of the config.group transformation function with the given property value.\n   * If no group function is set, it will just return the property value.*/\n  group(property: string): any {\n    return this.transform('group', property);\n  }\n\n  /** If no property given: Returns the output of the config.classes method or ''.\n   * If property given: Returns the output of the config.fields[property].classes method or '' */\n  classes(property?: string): string {\n    if (property) {\n      return this.transform('classes', property, this.resolve(property), '') || '';\n    }\n    if (!this.config || !this.config.classes) {\n      return '';\n    }\n    return this.config.classes(this);\n  }\n\n  /** Returns the output of the config.display transformation function with the given property value.\n   * If no display function is set, it will just return the property value.*/\n  display(property?: string): any {\n    if (!property) {\n      return this.transform('display', this.config.label || this.getProperties()[0]); // Object.keys(this.resolve())[0]\n    }\n    return this.transform('display', property);\n  }\n\n  /** Transforms the given field's value for sorting */\n  sort(property: string): any {\n    return this.transform('sort', property);\n  }\n\n  /** Returns value with all readOnly properties removed */\n  pickWriteOnly(value = this.body) {\n    return (<any>Object).assign({}, ...Object.keys(value)\n      .map(property => {\n        if (this.config.fields[property].readOnly) {\n          return;\n        }\n        return { [property]: value[property] };\n      }).filter(v => !!v));\n\n  }\n\n  isImmutableProperty(property: string): boolean {\n    if (this.config && this.config.fields && this.config.fields[property] && typeof this.config.fields[property].immutable === 'function') {\n      return this.config.fields[property].immutable(this);\n    }\n    return this.config.fields[property].immutable;\n  }\n\n  deleteImmutableProperties(value: Object = this.body) {\n    Object.keys(this.config.fields).forEach(property => {\n      if (value.hasOwnProperty(property) && this.isImmutableProperty(property)) {\n        delete value[property];\n      }\n    });\n  }\n\n  /** Transforms the given field's value for serialization when saving. */\n  serialize(value, put: boolean = false): any {\n    if (put) {\n      value = this.pickWriteOnly(value);\n    }\n    this.deleteImmutableProperties(value);\n    /** Run the remaining properties through serializers */\n    Object.keys(value).map((property) => {\n      (<any>Object).assign(value, {\n        [property]: this.transform('serialize', property, value[property]) // TODO: fix\n      });\n    });\n    return value;\n\n    /** Run the remaining properties through serializers */\n    /*return Object.keys(value).reduce((serialized, property) => {\n      return Object.assign(serialized, {\n        [property]: this.transform('serialize', property, value[property])\n      });\n    }, {});*/\n  }\n\n  /** Saves the given value. Run serializers before assigning the new value. */\n  save(value: T = this.body): Promise<Item<T>> {\n    if (this.config.onSave) {\n      return Promise.resolve(this.config.onSave(this, value))\n        .then((_value: T) => {\n          this.body = _value;\n          return this;\n        });\n    }\n    this.body = (<any>Object).assign(this.resolve() || {}, value);\n    return Promise.resolve(this);\n  }\n  /** Action method that is meant to be called on a button click or similar.\n   * Calls the config#action method with the item and the property name */\n  action(property, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    e.stopImmediatePropagation();\n    if (this.config.fields[property].action) {\n      this.config.fields[property].action(this, property);\n    }\n  }\n}\n","/** A Form is an extension of an Item. In advance to an Item it will create an Array of fields that is either extracted\n * from config.fields or directly from the item body. */\n\nimport { FieldConfigProperty } from '../config/field-config-property.interface';\nimport { Field } from '../field/field';\nimport { Item } from '../item/item';\nimport { FormConfig } from './form-config.interface';\n\n/** The Form class is an Item with additional info about its properties (Fields). */\nexport class Form<T> extends Item<T> {\n  /** Array of fields. It will be populated automatically when the form is constructed. */\n  public fields: Field[];\n  /** The configuration of the form. It is an extension of ItemConfig. */\n  public config: FormConfig<T>;\n\n  /** The constructor will populate the fields array.\n   * If config.fields is set only the configured fields will be created.\n   * If not, all properties of the given body will be used as fields. */\n  constructor(body: T, config?: FormConfig<T>) {\n    super(body, config);\n    this.fields = [];\n    if (!this.config || !this.config.fields) {\n      return;\n    }\n    Object.keys(this.config.fields)\n      .forEach((property) => {\n        this.fields.push(new Field(property, this.config.fields[property]));\n      });\n  }\n\n  /** creates and adds a single field to the form */\n  createField(property: string, config: FieldConfigProperty): Field | undefined {\n    if (!config) {\n      return;\n    }\n    if (!property) {\n      return;\n    }\n    if (this.config.fields[property]) {\n      console.error('cannot create field \"', property, '\". Property name already taken.');\n      return;\n    }\n    this.config.fields[property] = config;\n    const field = new Field(property, this.config.fields[property]);\n    this.fields = this.fields.concat([field]);\n    return field;\n  }\n\n  /** returns the field instance of the given property */\n  getField(property: string) {\n    return this.fields.find((field) => field.property === property);\n  }\n\n  /** Returns the original value of the property, if any. */\n  getValue(property: string) {\n    if (!this.body && this.config.fields && this.config.fields[property]) {\n      // If the prefill is not a primitive, return a clone to stay pristine\n      if (Array.isArray(this.config.fields[property].prefill)) {\n        return this.config.fields[property].prefill.slice(0);\n      } else if (typeof this.config.fields[property].prefill === 'object') {\n        return Object.assign({}, this.config.fields[property].prefill);\n      }\n      // if no body is present, the prefills are used\n      return this.config.fields[property].prefill;\n    } else {\n      return this.resolve(property);\n    }\n  }\n\n  /** Returns true if the form is currently in edit mode (has a body set) */\n  isEditing() {\n    return !!this.getBody();\n  }\n\n  /** Returns true if the form is currently in create mode (has not a body set) */\n  isCreating() {\n    return !this.isEditing();\n  }\n}\n","import { Subject, Observable } from 'rxjs';\nimport { ListConfig } from '../list/list-config.interface';\n\n/** This class can be used to control the loading behaviour of external data. */\nexport class Pagination<T> {\n  /** The total number of items that is being paginated. It can be changed via setTotal. */\n  protected total: number;\n  /** The pagination config */\n  protected config: ListConfig<T>;\n  /** Array to iterate over the number of pages. */\n  public pages: Array<any>;\n  /** Subject for tracking changes. */\n  private change = new Subject();\n  /** Observable that is nexted when the pagination has changed. */\n  public change$: Observable<any> = this.change.asObservable();\n\n  /** You can init each Pagination instance with an optional config.\n   * If no config is provided, it will default to ```{page: 1, size: 25}```. */\n  constructor(config?: ListConfig<T>, total?: number) {\n    this.config = { page: 1, size: 25 };\n    Object.assign(this.config, config);\n    Object.assign(this.config, {\n      availableSizes: Array.from(new Set([this.config.size]\n        .concat(this.config.availableSizes || [10, 25, 50, 100], [this.config.size])\n        .sort(((a, b) => a - b))))\n    });\n    if (total) {\n      this.setTotal(total);\n    }\n  }\n\n  /** Retrieves the current page */\n  getPage(): number {\n    return this.config.page;\n  }\n\n  /** Retrieves the number of pages */\n  getPages(): number {\n    return this.pages ? this.pages.length : 0;\n  }\n\n  /** Loads the next page. Throws error if already on last page. */\n  next(): void {\n    if (this.isLast()) {\n      return; // already last page\n    }\n    this.config.page += 1;\n    this.load();\n  }\n\n  /** Loads the previous page. Throws error if already on first page. */\n  prev(): void {\n    if (this.isFirst()) {\n      return; // already first page\n    }\n    this.config.page -= 1;\n    this.load();\n  }\n\n  /**\n   * Sets the total number of items and calculcates the page count.\n   * */\n  setTotal(total: number) {\n    /* if (this.total !== total) {\n      this.change.next(this.config);\n    } */\n    this.total = total;\n    this.pages = new Array(Math.ceil(this.total / this.config.size));\n    if (this.config.page !== 1 && this.config.page > this.pages.length) {\n      this.config.page = this.pages.length || 1;\n      this.load();\n    }\n  }\n\n  /** Merges config and fires next on change */\n  protected load(config?: ListConfig<T>): void {\n    if (config) {\n      Object.assign(this.config, config);\n    }\n    this.change.next(this.config);\n  }\n\n  /** Selects the given page number */\n  select(page: number, silent = false): void {\n    if (page === this.config.page || silent) {\n      this.config.page = page;\n      return;\n    }\n    this.load({ page: page });\n  }\n\n  /** Loads the first Page */\n  first(): void {\n    this.load({ page: 1 });\n  }\n\n  /** Loads the last page */\n  last() {\n    if (!this.pages) {\n      throw new Error(`Cannot load last page without knowing the item count.\n        Call setTotal(itemCount) before loading.`);\n    }\n    this.load({ page: this.pages.length });\n  }\n\n  /** Returns true if the given page number is currently active.*/\n  isActive(page: number): boolean {\n    return this.config.page === page;\n  }\n\n  /** Returns true if the current page is the first one */\n  isFirst(): boolean {\n    return this.config.page === 1;\n  }\n\n  /** Returns true if the current page is the last one */\n  isLast(): boolean {\n    if (!this.pages) {\n      return true;\n    }\n    return this.config.page === this.pages.length;\n  }\n\n  /** slices a given array according to the current pagination state */\n  slice(items: Array<any>): Array<any> {\n    return items.slice((this.config.page - 1) * this.config.size, (this.config.page) * this.config.size);\n  }\n\n  /** Returns an object with all relevant infos about the current state of pagination */\n  params() {\n    return {\n      page: this.getPage(),\n      pages: this.getPages(),\n      total: this.total,\n      from: (this.getPage() - 1) * this.config.size + 1,\n      to: Math.min(this.getPage() * this.config.size, this.total),\n      size: this.config.size,\n      availableSizes: this.config.availableSizes,\n    };\n  }\n  /** updates the size of the pages.  */\n  updateSize(size: number) {\n    if (!size) {\n      return;\n    }\n    this.load({ size, page: 1 });\n  }\n}\n","import { Item } from '../item/item';\n\n/** Used for natural sorting of strings */\nconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n\n/** Sorts strings (naturally) */\nexport function sortString(a, b) {\n  return collator.compare(a, b);\n}\n\n/** Sorts numbers */\nexport function sortNumber(a, b) {\n  return a - b;\n}\n\n/** Sorts booleans */\nexport function sortBoolean(a, b) {\n  return a ? -1 : 1;\n}\n\n/** The Sorter is a singleton that handles all kinds of sorting operations. */\nexport abstract class Sorter<T> {\n\n  /** Contains sorting methods for different value types. */\n  static sortType = {\n    'string': sortString,\n    'number': sortNumber,\n    'boolean': sortBoolean\n  };\n\n  /** Returns the sorting algorithm for the given item array. */\n  private static getAlgorithm(items: Array<Item<any>>, property?: string): (a, b) => number {\n    if (!items.length) {\n      return;\n    }\n    if (property && !items\n      .reduce((has, item) => has && item.sort(property) !== undefined, true)) {\n      console.warn('cannot sort property \"' + property + '\" because not all items have that property', items);\n      return;\n    }\n    const types = items\n      .map(item => typeof item.sort(property))\n      .filter((item, index, _items) => _items.indexOf(item) === index);\n    if (types.length > 1) {\n      console.warn('cannot sort items because they contain multiple types:', types);\n      return;\n    }\n    if (!this.sortType[types[0]]) {\n      console.warn('cannot sort items because no algorithm was found for type', types[0]);\n      return;\n    }\n    return this.sortType[types[0]];\n  }\n\n  /** Sorts a given Array of items after a given property.\n   * @param items Array of arbitrary content.\n   * @param property Optional property to sort after (For Objects)\n   * @param desc Optional Flag that will reverse sort the result (descending).\n   * @param resolve Optional resolve function to expose relevant the part of object that contains\n   *   the given property. */\n\n  static sort(items: Array<Item<any>>, property?: string, desc?: boolean): Array<any> {\n    const algorithm = this.getAlgorithm(items, property);\n    if (!algorithm) {\n      return;\n    }\n    items.sort((a, b) => {\n      if (!property) {\n        return algorithm(a.resolve(), b.resolve());\n      }\n      return algorithm(a.sort(property), b.sort(property));\n    });\n    if (desc) {\n      items.reverse();\n    }\n  }\n}\n","import { Observable, Subject } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\nimport { Collection } from '../collection/collection';\nimport { Field } from '../field/field';\nimport { Item } from '../item/item';\nimport { Pagination } from '../pagination/pagination';\nimport { Sorter } from '../sorter/sorter';\nimport { ListConfig } from './list-config.interface';\n\n/**\n * A more sophisticated Collection of Objects with arbitrary content.\n * It comes with features like resolve functions, identifiers, display formatting and sorting.\n */\nexport class List<T> extends Collection<Item<T>> {\n  /**\n   * Array of Properties that are relevant for each item. The fields are populated on construction\n   * via getFields method.\n   */\n  public fields: Array<Field>;\n  /**\n   * The List Configuration, click on ListConfig for details. Can be given an optional ListConfig.\n   */\n  public config: ListConfig<T>;\n  /**\n   * Current Value Groups (Different Unique Values).\n   */\n  groups = [];\n  /** The list's pagination (Optional) */\n  public pagination: Pagination<T>;\n  /** The items of the current page */\n  public page: Array<Item<T>> = [];\n  /** Subject that should be nexted when loading is finished */\n  protected change: Subject<List<T>> = new Subject();\n  /** Observable that is nexted when the list has changed. */\n  public change$: Observable<List<T>> = this.change.asObservable();\n\n  /** Getter for items, calls transform */\n  get display() {\n    if (!this.config || !this.config.display) {\n      return this.items;\n    }\n    return this.config.display(this.items);\n  }\n\n  /**\n   * Constructs the List. Populates the items and instantiates the fields.\n   */\n  constructor(values?: Array<T>, config: ListConfig<T> = {}, pagination?: Pagination<T>) {\n    super([]);\n    if (values) {\n      super.addAll(values.map(value => new Item(value, Object.assign({}, config))), false, false);\n    }\n    this.config = Object.assign({ page: 1, maxColumns: 8 }, config || {});\n    this.fields = this.getFields();\n    this.hideOverflowFields();\n    this.pagination = pagination || new Pagination(this.config, this.items.length);\n    this.change$.subscribe(() => {\n      this.pagination.select(this.config.page || 1, true);\n    });\n    if (!pagination) { // load if no custom pagination was given\n      this.pagination.change$.pipe(debounceTime(200))\n        .subscribe(_config => this.load(_config));\n      this.load();\n    }\n  }\n\n  /** Loads the list page with the given config or, if none given, uses the current config.\n   * Reapplies grouping (if any) and calls the change Subject. */\n  public load(config?: ListConfig<T>) {\n    if (config) {\n      Object.assign(this.config, config);\n    }\n    this.page = this.pagination.slice(this.items);\n    this.groupBy(this.config.sortBy);\n    this.change.next(this);\n  }\n\n  /** Adds the given item to the list and assigns the list config to the item*/\n  add(item: Item<T>, unique?: boolean, event: boolean = true) {\n    item.useConfig(this.config);\n    return super.add(item, unique, event);\n  }\n\n  /**\n   * Distills Array of item properties. Either uses keys of config.fields or parses the item\n   * properties directly.\n   */\n  protected getFields(): Array<Field> {\n    if (this.config && this.config.fields) {\n      return Object.keys(this.config.fields)\n        .filter((key) => this.config.fields[key].list !== false)\n        .map((field) => new Field(field, this.config.fields[field]));\n    }\n    const fields = [];\n    this.items.forEach((item) => {\n      item.getProperties().forEach(property => {\n        if (!fields.find((f) => f.property === property)) {\n          fields.push(new Field(property, { type: typeof item.resolve(property) }));\n        }\n      });\n    });\n    return fields;\n  }\n\n  public toggleVisibility(field) {\n    field.hideInList = !field.hideInList;\n    this.change.next(this);\n  }\n\n  /** Sets all fields that exceed the maxColumns to hidden */\n  protected hideOverflowFields() {\n    if (this.config && this.config.maxColumns) {\n      this.fields.filter(f => !f.hideInList).forEach((field, index) => {\n        if (index >= this.config.maxColumns && field.hideInList === undefined) {\n          field.hideInList = true;\n        }\n      });\n    }\n  }\n\n  /**\n   * Resolves the item with the given Array index or identifier (if configured)\n   */\n  id(identifier: any): Item<T> {\n    if (identifier === undefined) {\n      throw new Error(`cannot get item with identifier \"${identifier}\"`);\n    }\n    return this.items.find((item, key) => {\n      if (!item.config.identifier) {\n        return false;\n      }\n      return item.id() === identifier;\n    }) || this.items[identifier];\n  }\n\n  /** Filters the list after the given property and value */\n  public filter(property: string, value: any = '', operator: string = 'exact') {\n    this.config.filter = { [property]: value };\n    if (value === null) {\n      this.load();\n      return;\n      // this.page = [].concat(this.items);\n    }\n    // TODO find way to filter with pagination and without loosing filtered out items\n    this.page = this.items.filter((item) => {\n      return item.resolve(property).toLowerCase().includes(value.toLowerCase()); // TODO: better filter\n    }).slice(0, this.config.size || 100);\n  }\n\n  /** Clears the filter for given property or all properties if none given. */\n  clearFilter(property?: string) {\n    if (property) {\n      return this.filter(property, null);\n    }\n    this.load({\n      page: 1,\n      filter: {}\n    });\n  }\n\n  /** Helper function. Returns true if the given query value is empty (also recognizes empty array) */\n  isEmptyFilter(query: null | undefined | string | Array<any>) {\n    return query === '' ||\n      query === null ||\n      query === undefined ||\n      (Array.isArray(query) && !query.length);\n  }\n\n  /** Returns true if the given property has a filter set. If no property is given it returns true when no property has a filter. */\n  isFiltered(property?: string) {\n    if (!this.config.filter) {\n      return false;\n    }\n    if (!property) {\n      return Object.keys(this.config.filter)\n        .filter(key => !this.isEmptyFilter(this.config.filter[key]))\n        .length > 0;\n    }\n    return !this.isEmptyFilter(this.config.filter[property]);\n  }\n\n  /** Returns the filter */\n  getFilterValue(property?: string) {\n    if (!property) {\n      property = this.config.label;\n    }\n    if (!this.config.filter || !property) {\n      return undefined;\n    }\n    return this.config.filter[property];\n  }\n\n  /** Changes the config's sort variables to reflect the given sorting */\n  protected sortProperty(property: string, desc?: boolean) {\n    if (property !== this.config.sortBy) {\n      delete this.config.desc;\n      this.config.sortBy = property;\n    } else if (this.config.desc) {\n      delete this.config.sortBy;\n    }\n    this.config.desc = this.config.desc === undefined ? desc || false : !this.config.desc;\n  }\n\n  /** Returns true if the given sort state is active. You can either just check for a property + desc flag */\n  public isSorted(property: string, desc?: boolean) {\n    if (typeof desc === 'undefined') {\n      return this.config.sortBy === property;\n    }\n    return this.config.sortBy === property && this.config.desc === desc;\n  }\n\n  /** Sorts with given sorting, using the Sorter */\n  toggleSort(property: string, desc?: boolean) {\n    this.sortProperty(property, desc);\n    Sorter.sort(this.items, property, this.config.desc);\n    this.load(this.config);\n  }\n  /** Toggles selectMode of list config */\n  toggleSelectMode() {\n    this.config = Object.assign({}, this.config, {\n      selectMode: !this.config.selectMode\n    });\n    this.change.next(this);\n  }\n\n  /** Returns an Array of all unique values of the given property */\n  groupBy(property) {\n    delete this.groups;\n    const page = this.pagination ? this.pagination.getPage() : 0;\n    if (!property || !this.config.fields || !this.config.fields[property] || !this.config.fields[property].group) {\n      this.groups = [{\n        page,\n        sortBy: this.config.sortBy,\n        desc: this.config.desc\n      }];\n      return;\n    }\n    const groups = [];\n    this.page.forEach(item => {\n      const value = item.group(property);\n      if (!groups.find((g) => g.value === value)) {\n        groups.push({\n          value,\n          page,\n          property: this.config.sortBy,\n          desc: this.config.desc\n        });\n      }\n    });\n    this.groups = groups;\n  }\n\n  /** Item tracking for *ngFor. */\n  public trackItem(index, item) {\n    return index;\n  }\n  /** Returns an array of all sortable fields */\n  public sortableFields() {\n    return this.fields.filter(field => field.sortable);\n  }\n  /** Returns true if the given field index in the visible fields is higher than maxColumns.  */\n  public isOverTheMax(field: Field) {\n    return this.fields.filter(f => !f.hideInList).indexOf(field) >= this.config.maxColumns;\n  }\n}\n","import { Item } from '../item/item';\nimport { List } from '../list/list';\n\n/**\n * Extension of List that keeps track of selected items. It can keep track of items via identifier\n * property even if the object references are being replaced, e.g. when reloading a set if items.\n * It supports solo and multiple selection.\n */\nexport class Selection<T> extends List<T> {\n\n  /** Adds item to selection. If solo is true, all other items will be removed. */\n  select(item: Item<T>, solo = this.config.solo) {\n    if (solo) {\n      this.removeAll();\n      this.add(item);\n    } else {\n      this.add(item, true);\n    }\n  }\n\n  /** Returns the index of the given item or an item that has the same identifier or value. */\n  index(item: Item<T>): number {\n    if (this.config.identifier) {\n      return this.items.indexOf(this.id(item.resolve(this.config.identifier)));\n    }\n    return this.items.indexOf(this.items.find(i => i.resolve() === item.resolve()));\n  }\n\n  has(item: Item<T>) {\n    return super.has(item) || this.index(item) !== -1;\n  }\n\n  /** Toggle item in and out of selection.\n   * The solo property will change the behaviour like you would expect it to behave :) */\n  toggle(item: Item<T>, solo = this.config.solo, event: boolean = true) {\n    if (!item) {\n      console.warn('toggle malicious item', item);\n      return;\n    }\n    if (!this.has(item)) {\n      if (solo) {\n        return this.replaceWith([item], event);\n      }\n      this.add(item, event);\n    } else if (solo) {\n      if (this.items.length > 1) {\n        // if multiple are selected => keep item\n        return this.replaceWith([item], event);\n      }\n      this.removeAll();\n    } else {\n      this.remove(item, event);\n    }\n  }\n\n  /** Toggle multiple items. You can control if the items should be kept, flipped, or be kept unique*/\n  toggleAll(items: Array<Item<T>>, flip?: boolean, keep?: boolean) {\n    items = items || [];\n    // items = Array.isArray(items) ? items : [items];\n    if (!flip && !keep && this.hasAll(items)) {\n      this.removeAll(items);\n      return this;\n    }\n    items.forEach((item) => {\n      if (flip) {\n        this.toggle(item, this.config.solo, false);\n      } else if (!this.hasAll(items)) {\n        this.add(item, true, false);\n      }\n    });\n    this.update.next(this);\n    return this;\n  }\n\n  /** Flips all items. */\n  flipAll(items) {\n    return this.toggleAll(items, true);\n  }\n\n  /** Returns an Array containing the current value. If an identifier is set, the array will consist of the identifier values,\n   * if not, it will resolve the item contents. */\n  getValue(solo: boolean = this.config.solo) {\n    const value = this.items.map((item) => this.config.identifier ? item.id() : item.resolve());\n    if (solo) {\n      return value.length ? value[0] : null;\n    }\n    return value;\n  }\n\n}\n"]}