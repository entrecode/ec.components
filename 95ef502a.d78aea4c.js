(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{137:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return i}));var r=n(1),o=(n(0),n(179));const a={id:"entry-select",title:"Entry Select",sidebar_label:"Entry Select"},l=[{value:"Basic Example",id:"basic-example",children:[]},{value:"Used Components",id:"used-components",children:[]},{value:"Outputs",id:"outputs",children:[{value:"submitted",id:"submitted",children:[]},{value:"deleted",id:"deleted",children:[]}]},{value:"Inputs",id:"inputs",children:[{value:"model",id:"model",children:[]},{value:"entry",id:"entry",children:[]},{value:"config",id:"config",children:[]},{value:"config.keepPopOpen",id:"configkeeppopopen",children:[]},{value:"config.onEdit",id:"configonedit",children:[]},{value:"config.singularLabel",id:"configsingularlabel",children:[]},{value:"config.methods",id:"configmethods",children:[]}]},{value:"Methods",id:"methods",children:[]}],c={rightToc:l};function i({components:e,...t}){return Object(o.b)("wrapper",Object(r.a)({},c,t,{components:e,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The EntrySelectComponent can be used to pick entries from a model. It also provides full CRUD capabilities."),Object(o.b)("h2",{id:"basic-example"},"Basic Example"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-select model="muffin" [(ngModel)]="selectedMuffins"></ec-entry-select>\n')),Object(o.b)("h2",{id:"used-components"},"Used Components"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"searchbar for filtering"),Object(o.b)("li",{parentName:"ul"},"pop with entry-list + loader as dropdown"),Object(o.b)("li",{parentName:"ul"},"entry-list-pop for more sophisticated browsing (search icon)"),Object(o.b)("li",{parentName:"ul"},"resource-delete-pop for deleting entries"),Object(o.b)("li",{parentName:"ul"},"entry-pop for editing entries")),Object(o.b)("h2",{id:"outputs"},"Outputs"),Object(o.b)("h3",{id:"submitted"},"submitted"),Object(o.b)("p",null,"The submitted Output will be emitted when the form has been successfully submitted, passing the current Form Item as ",Object(o.b)("em",{parentName:"p"},"$event")," param:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-pop model="muffin" (submitted)="doStuffAfterSave($event)"></ec-crud>\n')),Object(o.b)("p",null,"now you could e.g. navigate to a detail page:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"doStuffAfterSave(muffin: Form<EntryResource>) {\n  this.router.navigate(['muffin', muffin.id()]);\n}\n")),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts/items"}),"Items")," (parent of Form) for more info on the emitted object."),Object(o.b)("h3",{id:"deleted"},"deleted"),Object(o.b)("p",null,"The deleted Output fires when the entry was deleted. It provides the current form as argument."),Object(o.b)("h2",{id:"inputs"},"Inputs"),Object(o.b)("h3",{id:"model"},"model"),Object(o.b)("p",null,"The model that is used. Affects the form fields and behaviour by resolving the config of the given model.\nSee ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts/config-pipeline"}),"Config Pipeline"),"."),Object(o.b)("h3",{id:"entry"},"entry"),Object(o.b)("p",null,"The entry that should be edited. Alternatively you could also use the edit method."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-pop model="muffin" [entry]="myMuffin"></ec-entry-pop>\n')),Object(o.b)("h3",{id:"config"},"config"),Object(o.b)("p",null,"The config that should be used for the form. See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts/form-options"}),"Form API")," for all options of forms."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-pop model="muffin" [config]="muffinCrudConfig"></ec-entry-pop>\n')),Object(o.b)("p",null,"See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts/config-pipeline"}),"Config Pipeline")," for other ways to pass configuration."),Object(o.b)("h3",{id:"configkeeppopopen"},"config.keepPopOpen"),Object(o.b)("p",null,"By default, the modal (pop) will be closed automatically when the form has been saved. When setting keepPopOpen to true, the modal will stay open until closed by the user or manually:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-pop model="muffin" #muffinPop [config]="{keepPopOpen:true}"></ec-entry-pop>\n<a (click)="muffinPop.hide()">hide</a>\n')),Object(o.b)("h3",{id:"configonedit"},"config.onEdit"),Object(o.b)("p",null,"Will be called before an entry is edited. Can be used to alter the entry that is passed to the component:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),'<ec-entry-pop model="muffin" [config]="{onEdit:editMuffin($event)}"></ec-entry-pop>\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"editMuffin(muffin: EntryResource) {\n  muffin.amazement_factor = 10; // forces amazement_factor to 10\n  return muffin; // the returned object is used to edit\n}\n")),Object(o.b)("h3",{id:"configsingularlabel"},"config.singularLabel"),Object(o.b)("p",null,"Controls how the entry is called in the modal header:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-html"}),"{{'resource.create' | symbol}} {{singularLabel || model}} \"{{form.display()}}\"\n\x3c!-- or --\x3e\n{{'resource.edit' | symbol}} {{singularLabel || model}} \"{{form.display()}}\"\n")),Object(o.b)("p",null,'If you set singularLabel to "Backware", this will result to e.g ',Object(o.b)("inlineCode",{parentName:"p"},'Edit: Backware "Strawberry Hill"')),Object(o.b)("h3",{id:"configmethods"},"config.methods"),Object(o.b)("p",null,"You can control the available actions by methods"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"post: Create"),Object(o.b)("li",{parentName:"ul"},"get: Read"),Object(o.b)("li",{parentName:"ul"},"put: Update"),Object(o.b)("li",{parentName:"ul"},"delete: Delete")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-ts"}),"muffinCrudConfig = {\n  methods: ['get', 'put'],\n};\n")),Object(o.b)("p",null,"This will disable creating and deleting entries."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Default Methods")),Object(o.b)("p",null,"By default, the entry-pop component will respect the active users permissions, meaning a save button will only be visible if the user is allowed to post or put entries. The same goes for the delete button. See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/core-concepts/accounts"}),"Accounts & Rights")," for more info. If you pass methods to the config, those will always be used."),Object(o.b)("h2",{id:"methods"},"Methods"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"edit"),Object(o.b)("li",{parentName:"ul"},"create")))}i.isMDXComponent=!0},179:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=o.a.createContext({}),b=function(e){var t=o.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c({},t,{},e)),n},u=function(e){var t=b(e.components);return o.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=b(n),d=r,f=u["".concat(l,".").concat(d)]||u[d]||s[d]||a;return n?o.a.createElement(f,c({ref:t},p,{components:n})):o.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var p=2;p<a;p++)l[p]=n[p];return o.a.createElement.apply(null,l)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);